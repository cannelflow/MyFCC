/*
Instruction 
1.Install how-to-npm with this command: npm install how-to-npm --global
2.Now start the tutorial by running how-to-npm.
*/
/*Hello, and welcome to the npm adventure workshop!  I am going to be
asking you to do various things with npm so that you can get started
with it easily.

Some helpful commands:

npm help ............ Get help with npm
how-to-npm print .... Re-display the current exercise
how-to-npm verify ... Verify that you have finished an exercise
how-to-npm solution . Show the solution for the current exercise

The first thing we're going to do is make sure that your npm
version is up to date.

Run `how-to-npm verify` once that is done.

(This is the only part of the workshop that requires network access.
If the network is busted, and you want to skip this one, you can run
`how-to-npm verify skip` to skip it.)*/
/*
01 Install npm
 $ how-to-npm verify
verifying that npm is installed...
You have version 2.14.4 installed.  Great!
Now let's see what the latest version is... wait for it...
The latest npm is: 3.7.2
You have version 2.14.4, but the latest is 3.7.2
Run `npm install npm -g` to upgrade it
(You can also just skip this if you want)
#########################################
###   YOUR SOLUTION IS NOT CORRECT!   ###
#########################################
*/
cannelflow1:~/workspace $ npm install npm -g
/home/ubuntu/.nvm/versions/node/v4.1.1/bin/npm -> /home/ubuntu/.nvm/versions/node/v4.1.1/lib/node_modules/npm/bin/npm-cli.js
npm@3.7.2 /home/ubuntu/.nvm/versions/node/v4.1.1/lib/node_modules/npm
cannelflow1:~/workspace $ how-to-npm verify
verifying that npm is installed...
You have version 3.7.2 installed.  Great!
Now let's see what the latest version is... wait for it...
The latest npm is: 3.7.2
Congratulations!
You have a recent version of npm installed!

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
02 Dev Environment
One of the most important things that npm does is install packages.

However, in order to be a good workshop program, we don't want to litter
files all over your computer, so before going any further, let's set up a
development environment.

Make a new directory and `cd` into it.

Run `how-to-npm verify` once you're done.  All the other commands
you run in this tutorial should be done in that folder.
*/
cannelflow1:~/workspace $ mkdir demo
cannelflow1:~/workspace $ cd demo
cannelflow1:~/workspace/demo $ how-to-npm verify
Congratulations!
You have a development environment.

From here on out, make sure to run the workshop in this dir

You might notice that a `.npmrc` file will show up in there.
That normaly would not be required, but the workshop uses it
to mock out the parts that would normally talk to the internet.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
03 Log In
npm is best when you can be a part of it.  That starts with
creating an account.

Because this is just a tutorial adventure, remember, we're not
*actually* creating an account anywhere.  However, when you run
this in the Real World, it'll create a real account, with a page
on npmjs.com and the ability to publish packages that real live
humans can install and enjoy.

To see who you're logged in as, run `npm whoami`

To create your account, run `npm adduser`

Try it now, and open the door to ever-greater module fun times!
Then run `how-to-npm verify`
*/
cannelflow1:~/workspace/demo $ npm adduser
Username: cannelflow
Password: 
Email: (this IS public) cannelflow@gmail.com
Logged in as cannelflow on https://registry.npmjs.org/.
cannelflow1:~/workspace/demo $ how-to-npm verify
Congratulations, cannelflow!
You are the proud owner of an imaginary new npm account!
Use it wisely.  Never in anger.  Always for the Good.

With this sweet power comes much responsibility, which is
sufficiently different from Spiderman's thing that Marvel
hopefully won't sue us.

Excelsior!

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
04 Start A Project
npm helps you build projects, but for npm to be able to do that, you need
to tell npm a little bit about your project. You can tell npm about your
project in a file called package.json.

Run `npm init --scope=<username>`, and replace <username> with the user
you created in the last lesson. This will create a package.json file.
(For extra credit, set the project up with a git repo as well.)

Run `how-to-npm verify` once you're done.
*/
cannelflow1:~/workspace/demo $ npm init --global=cannelflow2
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg> --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (demo) 
version: (1.0.0) 
description: 
entry point: (index.js) 
test command: 
git repository: 
keywords: 
author: 
license: (ISC) 
About to write to /home/ubuntu/workspace/demo/package.json:

{
  "name": "demo",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes) 
cannelflow1:~/workspace/demo $ how-to-npm verify
For extra credit, try also setting up this dir as
a git repository.

The convention is to have a single git repo for each
module or project.  Use the `git init` command to set
up your working dir as a git project.

Then, run `how-to-npm verify extra credit`


Congratulations!
You created a project!  View the package.json file to see it.


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
04 Strat A Module
The first thing that most people do with npm is install a dependency.

Dependencies are fetched from the registry, and unpacked in the `node_modules`
folder.

To install a module, use the `npm install <modulename>` command.

The registry that we're using for this tutorial is a tiny version of
the one at https://registry.npmjs.org.  So you might find that it only has
a small number of things.

Let's start out by installing the "@linclark/pkg" module.

Run `how-to-npm verify` once you're done.
*/
cannelflow1:~/workspace/demo $ npm install @linclark/pkg --save
demo@1.0.0 /home/ubuntu/workspace/demo
└── @linclark/pkg@1.0.2 

npm WARN demo@1.0.0 No description
npm WARN demo@1.0.0 No repository field.
cannelflow1:~/workspace/demo $ how-to-verify npm
bash: how-to-verify: command not found
cannelflow1:~/workspace/demo $ how-to-npm verify
Congratulations! You installed it.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
05 Listing Dependencies
npm isn't just for installing stuff.  It also shows you what you
have installed.

You can do this using the `npm ls` command.

Run this command in your working dir, and then run
`how-to-npm verify OK` if everything looks ok,
or `how-to-npm verify NOT OK` if there was a problem.
*/
cannelflow1:~/workspace/demo $ npm is

Usage: npm <command>

where <command> is one of:
    access, add-user, adduser, apihelp, author, bin, bugs, c,
    cache, completion, config, ddp, dedupe, deprecate, dist-tag,
    dist-tags, docs, edit, explore, faq, find, find-dupes, get,
    help, help-search, home, i, info, init, install,
    install-test, issues, it, la, link, list, ll, ln, login,
    logout, ls, outdated, owner, pack, ping, prefix, prune,
    publish, r, rb, rebuild, remove, repo, restart, rm, root,
    run-script, s, se, search, set, show, shrinkwrap, star,
    stars, start, stop, t, tag, team, test, tst, un, uninstall,
    unlink, unpublish, unstar, up, update, upgrade, v, verison,
    version, view, whoami

npm <cmd> -h     quick help on <cmd>
npm -l           display full usage info
npm faq          commonly asked questions
npm help <term>  search for help on <term>
npm help npm     involved overview

Specify configs in the ini-formatted file:
    /home/ubuntu/.config/how-to-npm/npmrc
or on the command line via: npm <command> --key value
Config info can be viewed via: npm help config

npm@3.7.2 /home/ubuntu/.nvm/versions/node/v4.1.1/lib/node_modules/npm
cannelflow1:~/workspace/demo $ how-to-npm verify
Please run:
`how-to-npm verify OK` if everything is ok,
or:
`how-to-npm verify NOT OK` otherwise.
#########################################
###   YOUR SOLUTION IS NOT CORRECT!   ###
#########################################


cannelflow1:~/workspace/demo $ how-to-npm verify OK
Looks like you fixed the problem.  Fantastic!
Note that `npm ls` is a lot calmer now.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
06 npm Test
Now you've installed something, and used `npm ls` to show what's going on.

If you look at the package.json file, it has this rather odd bit in it:

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },

npm can be used as a task runner, and almost every module and project
will have a test script that runs to make sure everything is good.  In
order to help remind you to do this, npm puts a "always failing" test
in there by default.

First, create a file called `test.js`.  It doesn't have to do anything,
really.  (This is npm class, not testing class.)  But it has to exit
without throwing an error, or else the test fails.

Then, edit your `package.json` file to make your scripts section look like
this instead:

  "scripts": {
    "test": "node test.js"
  },

Once that's done, run `how-to-npm verify` to check your work.
*/
cannelflow1:~/workspace/demo $ how-to-npm verify
Running your test script...



> demo@1.0.0 test /home/ubuntu/workspace/demo
> node test.js



...done!
Congratulations!  You wrote a test that passes!
Writing a test that is actually GOOD is left for another time.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

/*
07 Package NiceTies
So, we've created a package.json file, but it's missing a few things
that people usually expect.  If you type `npm install`, you'll see
something like this:

    npm WARN package.json demo@1.0.0 No description
    npm WARN package.json demo@1.0.0 No repository field.
    npm WARN package.json demo@1.0.0 No README data

Before we can share this work of art with the world, we need to make
it a bit more polished so that people know how to use it.

First, create a README.md file, with a bit of words in it.

Then, add a "repository" field in your package.json file, with a url
where people can access the code.

You can edit your package.json file by hand, or run `npm init` again.

Run `how-to-npm verify` when you're done.
*/
cannelflow1:~/workspace/demo $ how-to-npm verify
Looking sharp!
A package without a readme and some metadata is like a
bunch of JavaScript without instructions or git repo links.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
08 Publish
What good is a package manager without packages?

Not very good.

Luckily, that is not a problem for npm, because it's very easy for all
npm users to publish their modules and share them with the world.

Packages get into the registry by using the `npm publish` command.

Try it now.  There's not much too it.

(Make sure you're still in the right project directory, though.  If you
publish something by mistake, you can remove it, but there's no guarantee
that no one saw it in the meantime.)

Then run `how-to-npm verify` when you're done.
*/
cannelflow1:~/workspace/demo $ how-to-npm verify
npm ERR! Linux 4.2.0-c9
npm ERR! argv "/home/ubuntu/.nvm/versions/node/v4.1.1/bin/node" "/home/ubuntu/.nvm/versions/node/v4.1.1/bin/npm" "--color=always" "view" "demo"
npm ERR! node v4.1.1
npm ERR! npm  v3.7.2
npm ERR! code E404

npm ERR! 404 missing : demo
npm ERR! 404 
npm ERR! 404  'demo' is not in the npm registry.
npm ERR! 404 You should bug the author to publish it (or use the name yourself!)
npm ERR! 404 
npm ERR! 404 Note that you can also install from a
npm ERR! 404 tarball, folder, http url, or git url.

npm ERR! Please include the following file with any support request:
npm ERR!     /home/ubuntu/workspace/demo/npm-debug.log
Uh oh!
It looks like you didn't successfully publish the demo
package.  Try again!

In order to view your package content, I just ran this command:

  npm view demo

Run that command yourself to see what it prints out.


The `npm view` command is a great way to view package details,
to see what you just published, and to check if a name is already taken.

Now that you've published your first package here in make-believe npm
workshop land, go out and write a real thing to share with real humans!

You don't have to just share code for other people, though.  There are
also benefits to breaking up your code into small manageable pieces, even
if you are only using them all yourself.

You can imagine that your future self and your past self are the two
other developers on your team.  (Scheduling meetings is pretty tricky.)

Run `how-to-npm` to go on to the next adventure!

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
09 Version
Every package in npm has a version number associated with it.  As
you release updates to your package, these updates get an updated
version number.

Version numbers in npm follow a standard called "SemVer".  This stands
for "Semantic Version".  The specification for this standard can be
found at http://semver.org.

The tl;dr version is that for a version like this:

  1.2.3
  ^ ^ ^
  | | `-- Patch version. Update for every change.
  | `---- Minor version. Update for API additions.
  `------ Major version. Update for breaking API changes.

npm has a special command called `npm version` which will update your
package.json file for you, and also commit the change to git if your
project is a git repository.  You can learn more at `npm help version`.

Or, if you don't trust the machines, you can open up your package.json
file by hand, and put some new numbers in the "version" field.

The npm registry won't let you publish a new release of your package
without updating the version number!  Ever!  So, get used to the idea of
bumping the version whenever you want to publish, even if the change is
really minor.

Don't worry, there's a lot of integers, we probably won't run out.

Update your version number now, and then `how-to-npm verify` to check it.
*/
cannelflow1:~/workspace/demo $ npm version
{ demo: '1.1.0',
  npm: '3.7.2',
  ares: '1.10.1-DEV',
  http_parser: '2.5.0',
  modules: '46',
  node: '4.1.1',
  openssl: '1.0.2d',
  uv: '1.7.4',
  v8: '4.5.103.33',
  zlib: '1.2.8' }
cannelflow1:~/workspace/demo $ how-to-npm verify
Great job!
Run `how-to-npm` for the next exciting challenge!

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@     YOUR SOLUTION IS CORRECT!     @@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
/*
10 Publish Again
Publishing something once is fine.  But healthy packages get
published again and again with new and exciting bug fixes.

You can't re-use the same version number again, because that's hella
confusing for all the robots running the treadmills that power the npm
registry.  But, now that we changed the version number in the last
exercise, you can publish the package again.

Go for it!  Then get your prize with `how-to-npm verify`
*/
